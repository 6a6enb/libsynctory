#-
# Copyright (c) 2011 Daemotron <mail@daemotron.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


cmake_minimum_required(VERSION 2.8)

PROJECT(libsynctory C)

set (CMAKE_MODULE_PATH ${libsynctory_SOURCE_DIR}/CMake)


option(WITH_TEST "Build test subsystem (default: off)" ON) 


file(READ ${libsynctory_SOURCE_DIR}/src/config/version.h LIBSYNCTORY_VERSION_H_CONTENTS)
string(REGEX MATCH "_SYNCTORY_VERSION_FLAVOUR[ \t]+(_SYNCTORY_[A-Z]+)" LIBSYNCTORY_VERSION_FL ${LIBSYNCTORY_VERSION_H_CONTENTS})
string(REGEX MATCH "(_SYNCTORY_CURRENT|_SYNCTORY_STABLE|_SYNCTORY_ALPHA|_SYNCTORY_BETA|_SYNCTORY_PRERELEASE|_SYNCTORY_RELEASE)" LIBSYNCTORY_VERSION_FL ${LIBSYNCTORY_VERSION_FL})
string(REGEX MATCH "_SYNCTORY_VERSION_MAJOR[ \t]+([0-9]+)" LIBSYNCTORY_VERSION_MJ ${LIBSYNCTORY_VERSION_H_CONTENTS})
string(REGEX MATCH "([0-9]+)" LIBSYNCTORY_VERSION_MJ ${LIBSYNCTORY_VERSION_MJ})
string(REGEX MATCH "_SYNCTORY_VERSION_MINOR[ \t]+([0-9]+)" LIBSYNCTORY_VERSION_MI ${LIBSYNCTORY_VERSION_H_CONTENTS})
string(REGEX MATCH "([0-9]+)" LIBSYNCTORY_VERSION_MI ${LIBSYNCTORY_VERSION_MI})
string(REGEX MATCH "_SYNCTORY_VERSION_PATCH[ \t]+([0-9]+)" LIBSYNCTORY_VERSION_PT ${LIBSYNCTORY_VERSION_H_CONTENTS})
string(REGEX MATCH "([0-9]+)" LIBSYNCTORY_VERSION_PT ${LIBSYNCTORY_VERSION_PT})
string(REGEX MATCH "_SYNCTORY_VERSION_SUFFX[ \t]+([0-9]+)" LIBSYNCTORY_VERSION_SX ${LIBSYNCTORY_VERSION_H_CONTENTS})
string(REGEX MATCH "([0-9]+)" LIBSYNCTORY_VERSION_SX ${LIBSYNCTORY_VERSION_SX})

string(COMPARE EQUAL ${LIBSYNCTORY_VERSION_FL} "_SYNCTORY_RELEASE" LIBSYNCTORY_RELEASE)
if(LIBSYNCTORY_RELEASE)
    set(LIBSYNCTORY_VERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI}.${LIBSYNCTORY_VERSION_PT})
    set(LIBSYNCTORY_LIBVERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI})
else(LIBSYNCTORY_RELEASE)
    string(COMPARE EQUAL ${LIBSYNCTORY_VERSION_FL} "_SYNCTORY_PRERELEASE" LIBSYNCTORY_PRERELEASE)
    if(LIBSYNCTORY_PRERELEASE)
        set(LIBSYNCTORY_VERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI}.${LIBSYNCTORY_VERSION_PT}-rc${LIBSYNCTORY_VERSION_SX})
        set(LIBSYNCTORY_LIBVERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI}-rc${LIBSYNCTORY_VERSION_SX})
    else(LIBSYNCTORY_PRERELEASE)
        string(COMPARE EQUAL ${LIBSYNCTORY_VERSION_FL} "_SYNCTORY_BETA" LIBSYNCTORY_BETA)
        if(LIBSYNCTORY_BETA)
            set(LIBSYNCTORY_VERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI}.${LIBSYNCTORY_VERSION_PT}-b${LIBSYNCTORY_VERSION_SX})
            set(LIBSYNCTORY_LIBVERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI}-b${LIBSYNCTORY_VERSION_SX})
        else(LIBSYNCTORY_BETA)
            string(COMPARE EQUAL ${LIBSYNCTORY_VERSION_FL} "_SYNCTORY_ALPHA" LIBSYNCTORY_ALPHA)
            if(LIBSYNCTORY_ALPHA)
                set(LIBSYNCTORY_VERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI}.${LIBSYNCTORY_VERSION_PT}-a${LIBSYNCTORY_VERSION_SX})
                set(LIBSYNCTORY_LIBVERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI}-a${LIBSYNCTORY_VERSION_SX})
            else(LIBSYNCTORY_ALPHA)
                string(COMPARE EQUAL ${LIBSYNCTORY_VERSION_FL} "_SYNCTORY_STABLE" LIBSYNCTORY_STABLE)
                if(LIBSYNCTORY_STABLE)
                    set(LIBSYNCTORY_VERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI}-STABLE)
                    set(LIBSYNCTORY_LIBVERSION ${LIBSYNCTORY_VERSION_MJ}.${LIBSYNCTORY_VERSION_MI}-STABLE)
                else(LIBSYNCTORY_STABLE)
                    set(LIBSYNCTORY_VERSION ${LIBSYNCTORY_VERSION_MJ}.0-CURRENT)
                    set(LIBSYNCTORY_LIBVERSION ${LIBSYNCTORY_VERSION_MJ}.0-CURRENT)
                endif(LIBSYNCTORY_STABLE)
            endif(LIBSYNCTORY_ALPHA)
        endif(LIBSYNCTORY_BETA)
    endif(LIBSYNCTORY_PRERELEASE)
endif(LIBSYNCTORY_RELEASE)

set(PACKAGE "libsynctory")
set(PACKAGE_NAME ${PACKAGE})
set(PACKAGE_VERSION ${LIBSYNCTORY_VERSION})

set(CPACK_GENERATOR "TBZ2")
set(CPACK_SOURCE_GENERATOR "TBZ2")
set(CPACK_PACKAGE_VERSION ${PACKAGE_VERSION})
set(CPACK_SOURCE_IGNORE_FILES ".gitignore;.git/;/build/;libsynctory.kdev4;.kdev4/;.*~")

set(LIBSYNCTORY_LIBS "")
set(CMAKE_C_FLAGS "-std=c99 -pedantic -Wall -Wextra -pipe -O3 -fno-strict-aliasing")
set(CMAKE_REQUIRED_FLAGS ${CMAKE_ANSI_CFLAGS})
set(CMAKE_REQUIRED_DEFINITIONS -D_FILE_OFFSET_BITS=64)
set(CMAKE_REQUIRED_LIBRARIES ${LIBSYNCTORY_LIBS})

add_subdirectory(src)
add_subdirectory(doc)
include(CPack)